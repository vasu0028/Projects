@page "/moderator"

@using Microsoft.Extensions.DependencyInjection
@using PeerReviewWebsite.Classes.Data
@using PeerReviewWebsite.Classes.Data.Account
@using PeerReviewWebsite.Classes.Data.Account.RoleRequest
@using PeerReviewWebsite.Classes.Data.Review
@using System.IO
@using System.Diagnostics
@using PeerReviewWebsite.Pages.Components
@inject MyStateContainer state
@inject IJSRuntime JSRuntime
@inject NavigationManager UriHelper
@inherits OwningComponentBase

<PageTitle>Moderator</PageTitle>

<body>

    <NavigationBar activePage=NavigationBar.Page.Moderator showModeratorPage=true showAuthorPage=isAuthor showReviewerPage=isReviewer showRolesPage=canEditRoles/>

    <h1> Moderator Page </h1>

    <button disabled=@(tab == Page.Documents) hidden=@(!isDocumentMod) @onclick=@(() => tab = Page.Documents)>Documents</button>
    <button disabled=@(tab == Page.Users) hidden=@(!isUserMod) @onclick=@(() => tab = Page.Users)>Users</button>

    @if (tab == Page.Documents && isDocumentMod) {
        <p>Documents Waiting for Approval</p>
        <ul>
            @foreach (Document doc in docs)
            {
                if (doc.Status == DocumentStatus.Uploaded ||
                (doc.DocReviewers.Count == 0 & doc.Status == DocumentStatus.Approved) ||
                (doc.Status == DocumentStatus.Denied & string.IsNullOrWhiteSpace(doc.AdditionalNotes)))
                {
                    <li><DocumentLinkPanel Document=doc DocumentList=docs canRemove=true canDelete=false /></li>
                }
            }
        </ul>
        <br />
        @if (canCloseDocuments)
        {

            <p>Documents to Close</p>
            <ul>
                @foreach (Document doc in docs)
                {
                    if (doc.Status == DocumentStatus.RequestClose && (doc.DocModerators.Contains(state.User.Id)))
                    {
                        <li><DocumentLinkPanel Document=doc DocumentList=docs canRemove=true canDelete=false /></li>
                    }
                }
            </ul>
        }
        
        <br />
        <p>Documents Being Reviewed</p>
        <ul>
            @foreach (Document doc in docs)
            {
                if (doc.Status == DocumentStatus.Approved)
                {
                    <li><DocumentLinkPanel Document=doc DocumentList=docs canRemove=true canDelete=false /></li>
                }
            }
        </ul>
        
        <br />
        <p> All Documents </p>
        <ul>
            @foreach (Document doc in docs)
            {
                if (doc.Status != DocumentStatus.MovedToTrash)
                {
                    <li><DocumentLinkPanel Document=doc DocumentList=docs canRemove=true canDelete=false /></li>
                }
            }
        </ul>
    }
    
    @if (tab == Page.Users && isUserMod) {
        <p>Role Requests Waiting for Approval</p>
        <table class="table">
            <thead>
                <tr>
                    <th>User</th>
                    <th>Requested Role</th>
                    <th>Approve</th>
                    <th>Deny</th>
                </tr>
            </thead>
            <tbody>
                @foreach (RoleRequest request in roleRequests)
                {
                    <tr><RoleRequestPanel RequestId=request.Id UserId=request.UserId RoleId=request.RequestedRole OnChange=OnRoleRequestChanged /></tr>
                }
            </tbody>
        </table>
        <br />

        <p>All Users</p>
        <ul>
            @foreach (User user in users) {
                <li><UserLinkPanel User=user /></li>
            }
        </ul>
    }

</body>

<Footer />

@code {
    private enum Page {
        Documents,
        Users
    }
    private Page tab = Page.Documents;

    private AccountService AccountService { get; set; }
    private ReviewService ReviewService { get; set; }
    private RequestService RequestService { get; set; }

    private List<Document> docs = new();
    private List<RoleRequest> roleRequests = new();
    private List<User> users = new();

    private bool isAuthor;
    private bool isReviewer;
    private bool canEditRoles;
    private bool isDocumentMod;
    private bool isUserMod;
    private bool canCloseDocuments;
    protected override async Task OnInitializedAsync()
    {
        AccountService = ScopedServices.GetRequiredService<AccountService>();
        ReviewService = ScopedServices.GetRequiredService<ReviewService>();
        RequestService = ScopedServices.GetRequiredService<RequestService>();

        isAuthor = await AccountService.UserIsAuthor(state.User);
        isReviewer = await AccountService.UserIsReviewer(state.User);
        canCloseDocuments = await AccountService.DoesUserHavePermission(state.User, Permission.CloseDocument);
        canEditRoles = await AccountService.DoesUserHavePermission(state.User, Permission.EditRoles);
        isDocumentMod = await AccountService.UserIsDocumentModerator(state.User);
        isUserMod = await AccountService.UserIsUserModerator(state.User);

        if (!isDocumentMod)
            tab = Page.Users;

        await PopulateDocs();
        await PopulateRoleRequests();
        await PopulateUsers();
    }

    /// <summary>
    /// Gets all the documents for the user so that they can be listed later synchronously
    /// </summary>
    private async Task PopulateDocs()
    {
        docs.Clear();
        docs.AddRange(await ReviewService.GetAllDocumentsAsync());
    }

    private async Task OnRoleRequestChanged() {
        await PopulateRoleRequests();
        StateHasChanged();
    }

    private async Task PopulateRoleRequests()
    {
        roleRequests.Clear();
        roleRequests.AddRange(await RequestService.GetPendingRoleRequests());
    }

    private async Task PopulateUsers() {
        users.Clear();
        users.AddRange(await AccountService.GetAllUsersAsync());
    }

    /// <summary>
    /// Sets the state current document then opens the download in a new tab
    /// </summary>
    private async Task GotoDownload(Document doc)
    {
        state.CurrentDoc = doc;
        await JSRuntime.InvokeVoidAsync("open", "/download", "_blank");
    }

    private void RenderDoc(Document doc)
    {
        state.CurrentDoc = doc;
        UriHelper.NavigateTo($"/viewer");
    }
}